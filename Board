import java.awt.*;
import java.awt.geom.Line2D;

import javax.swing.*;
import java.lang.Math;
import java.util.ArrayList;

public class Board extends JPanel{

	private Square[][] board;
	private int[][] answers = new int[9][9];
	private Square currentSquare;

	public Board(){
		board = new Square[9][9];
		this.setOpaque(true);
		setBoard();
	}
	

	//initilize board
	public void setBoard(){
		//read file and split into the different boards and answers
		ArrayList<String> possibleMaps = new ArrayList<String>();
		ArrayList<String> correspondingAnswers = new ArrayList<String>();

		//read file
		TextIO.readFile("PuzzleBoards");
		for(int i = 1; i <= 4; i++){
			//separates maps and answer keys
			if( i % 2 == 1){ possibleMaps.add(TextIO.getlnString()); }
			else { correspondingAnswers.add(TextIO.getlnString()); }
		}

		if (possibleMaps.size() != correspondingAnswers.size()){
			System.out.println("File is missing information");
			//System.quit;
		}

		//randomly pick one and set values
		int random = (int)(Math.random()*possibleMaps.size());
		//map from textfile 
		String map = possibleMaps.get(random);
		System.out.println(map);
		System.out.println();

		//placement
		int place = 0;
		for(int r = 0; r < 9; r++){
			for (int c = 0; c < 9; c++){
				//System.out.print(map.substring(place,place+1));
				board[r][c] = turnValueToSquare(map.substring(place,place+1));
				if (board[r][c] instanceof Number) {
					board[r][c].setOriginal();
				}
				answers[r][c] = Integer.valueOf(correspondingAnswers.get(random).substring(place,place+1));
				place++;
			}
		}
		//System.out.println();
		
		this.setLayout(new GridLayout(9,9));

		for (int r = 8; r >= 0; r--){
			for (int c = 0; c < 9; c++){
				//set panel square to square from board
				this.add(board[r][c],r,c);
			}

		}
		this.repaint();
	}
	
	public int[][] getAnswers() {
		return answers;
	}

	public Square turnValueToSquare(String value){
		switch(value){
		case "1":
			//System.out.print("1_");
			return new One();
		case "2":
			//System.out.print("2_");
			return new Two();
		case "3":
			//System.out.print("3_");
			return new Three();
		case "4":
			//System.out.print("4_");
			return new Four();
		case "5":
			//System.out.print("5_");
			return new Five();
		case "6":
			//System.out.print("6_");
			return new Six();
		case "7":
			//System.out.print("7_");
			return new Seven();
		case "8":
			//System.out.print("8_");
			return new Eight();
		case "9":
			//System.out.print("9_");
			return new Nine();
		default:
			//System.out.print(" ");
			return new Square();
		}
	}

	public void paintComponent(Graphics g) {
		
		
		
		
	}

	public void setValue(int r, int c, int value, boolean correct){
		board[r][c] = turnValueToSquare(String.valueOf(value));
		if (!correct) { 
			((Number)board[r][c]).setColor(Color.RED);
		}
		else { 
			((Number)board[r][c]).setColor(Color.BLACK);
		}
	}
	
	public void setCurrentSquare(Square square) {
		currentSquare = square;
	}
	
	public boolean checkAllCorrect() {
		for (int r = 0; r < 9; r++) {
			for (int c = 0; c < 9; c++) {
				if (board[r][c].getValue() == 0) return false;
				if (board[r][c].getValue() != answers[r][c]) return false;
			}
		}
		return true;
	}
	
	public String containsPoint(int x, int y) {
		int r = x/board[0][0].getHeight();
		int c = y/board[0][0].getWidth();
		return r + "" + c;
	}
	
	//can you edit that square (is it not one of the original squares)
	public boolean isOriginal(Square square) {
		return square.getOriginal();
	}

}
